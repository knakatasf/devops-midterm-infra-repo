name: Promote Release Candidate

on:
  workflow_dispatch:
  repository_dispatch:
    types: [promote-release]

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        run: |
          echo "Logging in to AWS ECR..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      - name: Promote Latest Release to RC
        run: |
          export AWS_ECR_REPO=${{ secrets.AWS_ECR_REPO }}
          export RELEASE_TAG=${{ github.event.client_payload.tag }}  # e.g., 1.0.15
          export RC_LABEL=${{ github.event.client_payload.rc_label }} # e.g., rc1

          # Pull the latest release images
          docker pull $AWS_ECR_REPO:backend-$RELEASE_TAG
          docker pull $AWS_ECR_REPO:frontend-$RELEASE_TAG

          # Tag the pulled images as RC
          docker tag $AWS_ECR_REPO:backend-$RELEASE_TAG $AWS_ECR_REPO:backend-$RC_LABEL
          docker tag $AWS_ECR_REPO:frontend-$RELEASE_TAG $AWS_ECR_REPO:frontend-$RC_LABEL

          # Push the newly tagged RC images to ECR
          docker push $AWS_ECR_REPO:backend-$RC_LABEL
          docker push $AWS_ECR_REPO:frontend-$RC_LABEL

      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/my-key.pem
          chmod 600 ~/.ssh/my-key.pem

      - name: Deploy to RC Environment
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ secrets.QA_EC2_IP }} << 'EOF'
            export AWS_ECR_REPO=${{ secrets.AWS_ECR_REPO }}
            export RC_LABEL=${{ github.event.client_payload.rc_label }}

            docker pull $AWS_ECR_REPO:backend-$RC_LABEL
            docker pull $AWS_ECR_REPO:frontend-$RC_LABEL

            export RDS_HOST=${{ secrets.RDS_HOST }}
            export RDS_USER=${{ secrets.RDS_USER }}
            export RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            export RDS_NAME=${{ secrets.RDS_NAME }}
            export RDS_PORT=${{ secrets.RDS_PORT }}
            export FRONTEND_URL=${{ secrets.FRONTEND_URL }}

            docker-compose -f docker-compose.promo.yml up -d

            echo "âœ… Deployment to RC environment successful!"
          EOF
