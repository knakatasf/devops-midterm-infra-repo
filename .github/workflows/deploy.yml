name: Nightly Deployment

on:
  push:
    branches:
      - main
#  schedule:
#    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout infra-repo
#        uses: actions/checkout@v3
#        with:
#          repository: knakatasf/devops-midterm-infra-repo
#          token: ${{ secrets.ACCESS_TOKEN }}
#          path: infra-repo
#
#      - name: Checkout source-repo
#        uses: actions/checkout@v3
#        with:
#          repository: knakatasf/devops-midterm-source-repo
#          token: ${{ secrets.ACCESS_TOKEN }}
#          path: source-repo
#
#      - name: (+) Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: (+) Build frontend and backend images
#        run: |
#          cd source-repo/backend
#          docker build -t backend-app:latest .
#          cd ../frontend
#          docker build -t frontend-app:latest .
#
#      - name: (+) Save Docker Images as tar files
#        run: |
#          docker save -o backend-app.tar backend-app:latest
#          docker save -o frontend-app.tar frontend-app:latest
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
#          aws-region: us-east-1
#
#      - name: Delete previous EC2 stack, if exists
#        continue-on-error: true
#        run: |
#          aws cloudformation delete-stack --stack-name temp-ec2-stack
#          echo "Waiting for stack deletion..."
#          aws cloudformation wait stack-delete-complete --stack-name temp-ec2-stack
#
#      - name: Launch an EC2 instance
#        run: |
#          aws cloudformation deploy \
#          --template-file infra-repo/cloudformation/ec2-instance.yml \
#          --stack-name temp-ec2-stack \
#          --capabilities CAPABILITY_NAMED_IAM
#
#      - name: Wait for EC2 instance to be ready
#        run: sleep 30
#
#      - name: Get EC2 public IP
#        id: get-ip
#        run: |
#          PUBLIC_IP=$(aws cloudformation describe-stacks --stack-name temp-ec2-stack \
#            --query "Stacks[0].Outputs[?OutputKey=='PublicIp'].OutputValue" --output text)
#          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV
#
      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/my-key.pem
          chmod 600 ~/.ssh/my-key.pem
#
#      - name: (+) Transfer Docker Images and docker-compose.prod.yml to EC2
#        run: |
#          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem backend-app.tar ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/
#          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem frontend-app.tar ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/
#          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem infra-repo/docker-compose.prod.yml ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/
#
#      - name: (+) SSH into EC2 and set up environment variables
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            echo "RDS_HOST=${{ secrets.RDS_HOST }}" >> /home/ec2-user/.env
#            echo "RDS_USER=${{ secrets.RDS_USER }}" >> /home/ec2-user/.env
#            echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> /home/ec2-user/.env
#            echo "RDS_NAME=${{ secrets.RDS_NAME }}" >> /home/ec2-user/.env
#            echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> /home/ec2-user/.env
#            echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> /home/ec2-user/.env
#          EOF
#
#      - name: (+) Install Docker on EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            sudo yum update -y
#            sudo yum install -y docker
#            sudo service docker start
#            sudo usermod -a -G docker ec2-user
#            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#            sudo chmod +x /usr/local/bin/docker-compose
#            docker-compose --version
#            echo "Docker installed successfully!"
#          EOF
#
#      - name: (+) Start containers with docker-compose
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            docker load -i /home/ec2-user/backend-app.tar
#            docker load -i /home/ec2-user/frontend-app.tar
#            docker-compose -f /home/ec2-user/docker-compose.prod.yml --env-file /home/ec2-user/.env up -d
#          EOF

#      - name: (-) Copy source-repo to EC2
#        run: |
#          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem -r source-repo ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/source-repo
#          scp -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem -r infra-repo ec2-user@${{ env.PUBLIC_IP }}:/home/ec2-user/infra-repo
#
#      - name: (-) Install Docker, setup environment variables, build an image, instantiate containers, and run containers
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            sudo yum update -y
#            sudo yum install -y docker
#            sudo service docker start
#            sudo usermod -a -G docker ec2-user
#            echo "Docker installed successfully!"
#            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#            sudo chmod +x /usr/local/bin/docker-compose
#            docker-compose --version
#            export RDS_HOST=${{ secrets.RDS_HOST }}
#            export RDS_USER=${{ secrets.RDS_USER }}
#            export RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
#            export RDS_NAME=${{ secrets.RDS_NAME }}
#            export RDS_PORT=${{ secrets.RDS_PORT }}
#            cd /home/ec2-user/infra-repo
#            docker-compose -f docker-compose.prod.yml build --no-cache
#            docker-compose -f docker-compose.prod.yml up -d
#          EOF
#
#      - name: (-) Initialize RDS MySQL
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            sudo yum update -y
#            sudo yum install -y mariadb105
#            echo "MySQL client installed."
#
#            mysql -h ${{ secrets.RDS_HOST }} \
#            -u ${{ secrets.RDS_USER }} \
#            -p${{ secrets.RDS_PASSWORD }} \
#            -P ${{ secrets.RDS_PORT }} \
#            -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.RDS_NAME }};"
#
#            echo "Database created."
#            mysql -h ${{ secrets.RDS_HOST }} \
#                  -u ${{ secrets.RDS_USER }} \
#                  -p${{ secrets.RDS_PASSWORD }} \
#                  -P ${{ secrets.RDS_PORT }} \
#                  ${{ secrets.RDS_NAME }} < ~/source-repo/database/init.sql
#
#            echo "Database initialized successfully."
#          EOF

#      - name: Run smoke tests on EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            echo "Running smoke tests..."
#
#            # Frontend Smoke Test
#            FRONTEND_URL="http://localhost:5173"
#            for i in {1..10}; do
#              RESPONSE=$(curl -s $FRONTEND_URL)
#              if echo "$RESPONSE" | grep -q "<title>Vite + React</title>"; then
#                echo "✅ Homepage loaded successfully!"
#                break
#              fi
#              echo "Retrying in 1 second..."
#              sleep 1
#            done
#
#            if ! echo "$RESPONSE" | grep -q "<title>Vite + React</title>"; then
#              echo "❌ Homepage did not load correctly!"
#              exit 1
#            fi
#
#            # Backend Smoke Test
#            BACKEND_URL="http://localhost:8800/"
#            echo "Testing backend at $BACKEND_URL"
#            if curl -s -o /dev/null -I -w "%{http_code}" $BACKEND_URL | grep -q "200"; then
#              echo "✅ Backend is up!"
#            else
#              echo "❌ Backend test failed!"
#              exit 1
#            fi
#          EOF

#      - name: (-) Run smoke tests
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            echo "Running smoke tests..."
#
#            chmod +x frontend/tests/homepage.test.sh
#            ./frontend/tests/homepage.test.sh
#            if [ $? -ne 0 ]; then
#              echo "Frontend test failed!"
#              exit 1
#            fi
#            echo "Frontend test passed!"
#
#            # Run API test
#            chmod +x backend/tests/api.test.sh
#            ./backend/tests/api.test.sh
#            if [ $? -ne 0 ]; then
#              echo "Backend test failed!"
#              exit 1
#            fi
#            echo "Backend test passed!"
#          EOF
#
#      - name: Push Docker image to ECR
#        if: success()
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
#            echo "Logging in to AWS ECR.."
#            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
#            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
#            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
#            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
#
#            echo "Tagging image.."
#            TIMESTAMP=$(date +"%Y%m%d%H%M%S")
#            cd /home/ec2-user/infra-repo
#            docker tag infra-repo-backend:latest ${{ secrets.AWS_ECR_REPO }}:backend-$TIMESTAMP
#            docker tag infra-repo-backend:latest ${{ secrets.AWS_ECR_REPO }}:backend-latest
#
#            docker tag infra-repo-frontend:latest ${{ secrets.AWS_ECR_REPO }}:frontend-$TIMESTAMP
#            docker tag infra-repo-frontend:latest ${{ secrets.AWS_ECR_REPO }}:frontend-latest
#
#
#            echo "Pushing the images to ECR.."
#            docker push ${{ secrets.AWS_ECR_REPO }}:backend-$TIMESTAMP
#            docker push ${{ secrets.AWS_ECR_REPO }}:backend-latest
#            docker push ${{ secrets.AWS_ECR_REPO }}:frontend-$TIMESTAMP
#            docker push ${{ secrets.AWS_ECR_REPO }}:frontend-latest
#
#            echo "Docker images pushed to ECR successfully!"
#          EOF

#      - name: Login to AWS ECR
#        if: success()
#        run: |
#          echo "Logging in to AWS ECR..."
#          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
#
#      - name: Tag and Push Docker images to ECR
#        if: success()
#        run: |
#          echo "Tagging images..."
#          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
#
#          docker tag backend-app:latest ${{ secrets.AWS_ECR_REPO }}:backend-$TIMESTAMP
#          docker tag backend-app:latest ${{ secrets.AWS_ECR_REPO }}:backend-latest
#
#          docker tag frontend-app:latest ${{ secrets.AWS_ECR_REPO }}:frontend-$TIMESTAMP
#          docker tag frontend-app:latest ${{ secrets.AWS_ECR_REPO }}:frontend-latest
#
#          echo "Pushing images to ECR..."
#          docker push ${{ secrets.AWS_ECR_REPO }}:backend-$TIMESTAMP
#          docker push ${{ secrets.AWS_ECR_REPO }}:backend-latest
#          docker push ${{ secrets.AWS_ECR_REPO }}:frontend-$TIMESTAMP
#          docker push ${{ secrets.AWS_ECR_REPO }}:frontend-latest
#
#          echo "✅ Docker images pushed to ECR successfully!"


      - name: Deploy to QA EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/my-key.pem ec2-user@${{ secrets.QA_EC2_IP }} << 'EOF'
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
      
            echo "Docker installed successfully!"
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            docker-compose --version
      
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
      
            echo "Logging in to AWS ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 793261838120.dkr.ecr.us-east-1.amazonaws.com
      
            export AWS_ECR_REPO=${{ secrets.AWS_ECR_REPO }}
            echo "ECR Repo URL: $AWS_ECR_REPO"

            docker pull $AWS_ECR_REPO:backend-latest
            docker pull $AWS_ECR_REPO:frontend-latest
          
            export RDS_HOST=${{ secrets.RDS_HOST }}
            export RDS_USER=${{ secrets.RDS_USER }}
            export RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            export RDS_NAME=${{ secrets.RDS_NAME }}
            export RDS_PORT=${{ secrets.RDS_PORT }}
          
            echo "Checking for docker-compose.qa.yml..."
            if [ ! -f docker-compose.qa.yml ]; then
              cp /home/ec2-user/infra-repo/docker-compose.prod.yml /home/ec2-user/docker-compose.qa.yml
            fi

            docker-compose -f docker-compose.qa.yml up -d

            echo "Deployment to QA EC2 successful!"
          EOF